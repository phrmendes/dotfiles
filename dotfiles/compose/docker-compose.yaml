services:
  npm:
    image: docker.io/jc21/nginx-proxy-manager:latest
    container_name: npm
    restart: always
    ports:
      - 80:80
      - 81:81
      - 443:443
    volumes:
      - npm_data:/data
      - letsencrypt:/etc/letsencrypt
    environment:
      - DB_POSTGRES_HOST=postgres
      - DB_POSTGRES_PORT=5432
      - DB_POSTGRES_USER=${PG_USER}
      - DB_POSTGRES_PASSWORD=${PG_PASSWORD}
      - DB_POSTGRES_NAME=npm
    depends_on:
      - postgres

  adguardhome:
    image: docker.io/adguard/adguardhome:latest
    container_name: adguardhome
    restart: always
    volumes:
      - adguardhome_conf:/opt/adguardhome/conf
      - adguardhome_work:/opt/adguardhome/work
    ports:
      - 53:53
      - 53:53/udp
      - 8080:80
      - 3000:3000

  duplicati:
    image: docker.io/linuxserver/duplicati:latest
    container_name: duplicati
    restart: always
    environment:
      - PGID=${PGID}
      - PUID=${PUID}
      - TZ=${TZ}
      - DUPLICATI__WEBSERVICE_PASSWORD=${DUPLICATI_WEBSERVICE_PASSWORD}
      - SETTINGS_ENCRYPTION_KEY=${DUPLICATI_ENCRYPTION_KEY}
    volumes:
      - duplicati_config:/config
      - duplicati_backups:/backups
      - duplicati_source:/source
      - syncthing_data:/syncthing:ro
      - postgres_dumps:/postgres_dumps:ro
    ports:
      - 8200:8200

  sftpgo:
    image: docker.io/drakkan/sftpgo:latest
    container_name: sftpgo
    restart: always
    volumes:
      - sftpgo_data:/var/lib/sftpgo
      - syncthing_data:/files/syncthing
      - postgres_dumps:/files/postgres_dumps:ro
      - /mnt/external/:/files/external
    ports:
      - 8081:8080
      - 2022:2022

  syncthing:
    image: docker.io/linuxserver/syncthing:latest
    container_name: syncthing
    restart: always
    environment:
      - PGID=${PGID}
      - PUID=${PUID}
      - TZ=${TZ}
    volumes:
      - syncthing_config:/config
      - syncthing_data:/data
    ports:
      - 21027:21027/udp
      - 22000:22000
      - 22000:22000/udp
      - 8384:8384

  beszel-agent:
    image: docker.io/henrygd/beszel-agent:latest
    container_name: beszel-agent
    restart: always
    network_mode: host
    volumes:
      - beszel_socket:/beszel_socket
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - LISTEN=/beszel_socket/beszel.sock
      - KEY=ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIHh93kUCxYYQhVuU5nGtdD43Sc/F/5m+1vqL25kqbWT2

  beszel:
    image: docker.io/henrygd/beszel:latest
    container_name: beszel
    restart: always
    ports:
      - 8090:8090
    volumes:
      - beszel_data:/beszel_data
      - beszel_socket:/beszel_socket
    environment:
      - APP_URL=https://beszel.codlet-catfish.ts.net
    depends_on:
      - beszel-agent

  dozzle:
    image: docker.io/amir20/dozzle:latest
    container_name: dozzle
    restart: always
    ports:
      - 8082:8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - DOZZLE_ENABLE_ACTIONS=true
      - DOZZLE_ENABLE_SHELL=true

  ntfy:
    image: binwiederhier/ntfy
    container_name: ntfy
    restart: always
    command:
      - serve
    ports:
      - 8084:80
    volumes:
      - ntfy_cache:/var/cache/ntfy
      - ntfy_data:/etc/ntfy
    environment:
      - PGID=${PGID}
      - PUID=${PUID}
      - TZ=${TZ}

  deluge:
    image: lscr.io/linuxserver/deluge:latest
    container_name: deluge
    restart: always
    environment:
      - PGID=${PGID}
      - PUID=${PUID}
      - TZ=${TZ}
    volumes:
      - deluge_config:/config
      - /mnt/external:/files
    ports:
      - 8112:8112
      - 6881:6881
      - 6881:6881/udp

  jellyfin:
    image: lscr.io/linuxserver/jellyfin:latest
    container_name: jellyfin
    restart: always
    environment:
      - PGID=${PGID}
      - PUID=${PUID}
      - TZ=${TZ}
    volumes:
      - jellyfin_data:/config
      - /mnt/external/movies:/data/movies
      - /mnt/external/tvshows:/data/tvshows
    ports:
      - 8096:8096
      - 7359:7359/udp
      - 1900:1900/udp

  atuin:
    image: ghcr.io/atuinsh/atuin:latest
    container_name: atuin
    restart: always
    command: server start
    volumes:
      - atuin_config:/config
    ports:
      - 8888:8888
    environment:
      - ATUIN_HOST=0.0.0.0
      - ATUIN_OPEN_REGISTRATION=true
      - ATUIN_DB_URI=postgres://${PG_USER}:${PG_PASSWORD}@postgres/atuin
      - RUST_LOG=info,atuin_server=debug
    depends_on:
      - postgres

  postgres:
    image: docker.io/postgres:17
    container_name: postgres
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - ./init.sh:/docker-entrypoint-initdb.d/init.sh:ro
    environment:
      - POSTGRES_USER=${PG_USER}
      - POSTGRES_PASSWORD=${PG_PASSWORD}
      - POSTGRES_DATABASES=atuin,npm

  pgbackup:
    image: docker.io/prodrigestivill/postgres-backup-local:latest
    container_name: pgbackup
    restart: always
    volumes:
      - postgres_dumps:/dumps
    environment:
      - TZ=${TZ}
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=atuin,npm
      - POSTGRES_USER=${PG_USER}
      - POSTGRES_PASSWORD=${PG_PASSWORD}
      - SCHEDULE=@daily
      - BACKUP_ON_START=TRUE
      - BACKUP_DIR=/dumps
      - WEBHOOK_URL=https://ntfy.codlet-catfish.ts.net/postgres_dump
      - WEBHOOK_ERROR_URL=https://ntfy.codlet-catfish.ts.net/postgres_dump
    depends_on:
      - postgres

  adminer:
    image: docker.io/adminer:latest
    container_name: adminer
    restart: always
    ports:
      - 8083:8080

volumes:
  adguardhome_conf:
  adguardhome_work:
  atuin_config:
  beszel_data:
  beszel_socket:
  deluge_config:
  duplicati_backups:
  duplicati_config:
  duplicati_source:
  jellyfin_data:
  letsencrypt:
  npm_data:
  ntfy_cache:
  ntfy_data:
  postgres_data:
  postgres_dumps:
  sftpgo_data:
  syncthing_config:
  syncthing_data:
